import { NextRequest, NextResponse } from "next/server";

// –¢–∏–ø—ã Telegram
interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
}

interface TelegramMessage {
  message_id: number;
  from?: {
    id: number;
    is_bot: boolean;
    first_name: string;
    username?: string;
  };
  chat: {
    id: number;
    type: string;
  };
  text?: string;
  photo?: Array<{
    file_id: string;
    file_size: number;
  }>;
}

export async function POST(request: NextRequest) {
  try {
    const update: TelegramUpdate = await request.json();

    if (!update.message) {
      return NextResponse.json({ ok: true });
    }

    const message = update.message;
    const username = message.from?.username;
    const text = message.text?.trim();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!isAuthorized(username)) {
      await sendMessage(
        message.chat.id,
        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–æ–º."
      );
      return NextResponse.json({ ok: true });
    }

    if (!text) {
      return NextResponse.json({ ok: true });
    }

    // –ö–æ–º–∞–Ω–¥—ã
    if (text.startsWith("/")) {
      await handleCommand(text, message);
      return NextResponse.json({ ok: true });
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error("Telegram webhook error:", error);
    return NextResponse.json({ ok: true }); // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok –¥–ª—è Telegram
  }
}

function isAuthorized(username?: string): boolean {
  if (!username) return false;

  const adminUsernames =
    process.env.TELEGRAM_ADMIN_USERNAMES?.split(",").map(u => u.trim()) || [];
  return adminUsernames.includes(username);
}

async function handleCommand(command: string, message: TelegramMessage) {
  const chatId = message.chat.id;

  switch (command.split(" ")[0]) {
    case "/start":
      await sendMessage(
        chatId,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∞–π—Ç–∞ –°–¢–ò–õ–ö–†–ê–§–¢.\n\n" +
          "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
          "/help - –°–ø—Ä–∞–≤–∫–∞"
      );
      break;

    case "/help":
      await sendMessage(
        chatId,
        "<b>üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n" +
          "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞ –°–¢–ò–õ–ö–†–ê–§–¢.\n" +
          "–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç."
      );
      break;

    default:
      await sendMessage(
        chatId,
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
      );
  }
}

async function sendMessage(chatId: number, text: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken) return;

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      parse_mode: "HTML",
    }),
  });
}
