import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/utils/prisma";

// –¢–∏–ø—ã Telegram
interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
}

interface TelegramMessage {
  message_id: number;
  from?: {
    id: number;
    is_bot: boolean;
    first_name: string;
    username?: string;
  };
  chat: {
    id: number;
    type: string;
  };
  text?: string;
  photo?: Array<{
    file_id: string;
    file_size: number;
  }>;
}

// State management for article creation process
const userStates = new Map<
  number,
  {
    step:
      | "awaiting_title"
      | "awaiting_content"
      | "awaiting_image"
      | "awaiting_excerpt";
    data: Partial<{
      title: string;
      content: string;
      excerpt: string;
      coverImage: string;
    }>;
  }
>();

export async function POST(request: NextRequest) {
  try {
    const update: TelegramUpdate = await request.json();

    if (!update.message) {
      return NextResponse.json({ ok: true });
    }

    const message = update.message;
    const username = message.from?.username;
    const userId = message.from?.id;
    const text = message.text?.trim();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!isAuthorized(username)) {
      await sendMessage(
        message.chat.id,
        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç–∞—Ç—å—è–º–∏."
      );
      return NextResponse.json({ ok: true });
    }

    if (!text) {
      return NextResponse.json({ ok: true });
    }

    // –ö–æ–º–∞–Ω–¥—ã
    if (text.startsWith("/")) {
      await handleCommand(text, message);
      return NextResponse.json({ ok: true });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    if (userId && userStates.has(userId)) {
      await handleArticleCreation(userId, text, message);
      return NextResponse.json({ ok: true });
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error("Telegram webhook error:", error);
    return NextResponse.json({ ok: true }); // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ok –¥–ª—è Telegram
  }
}

function isAuthorized(username?: string): boolean {
  if (!username) return false;

  const adminUsernames =
    process.env.TELEGRAM_ADMIN_USERNAMES?.split(",").map(u => u.trim()) || [];
  return adminUsernames.includes(username);
}

async function handleCommand(command: string, message: TelegramMessage) {
  const chatId = message.chat.id;
  const userId = message.from?.id;

  switch (command.split(" ")[0]) {
    case "/start":
      await sendMessage(
        chatId,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–æ–º –°–¢–ò–õ–ö–†–ê–§–¢.\n\n" +
          "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
          "/new_article - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é\n" +
          "/list_articles - –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π\n" +
          "/help - –°–ø—Ä–∞–≤–∫–∞"
      );
      break;

    case "/new_article":
      if (userId) {
        userStates.set(userId, {
          step: "awaiting_title",
          data: {},
        });
        await sendMessage(
          chatId,
          "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏</b>\n\n" +
            "–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏"
        );
      }
      break;

    case "/list_articles":
      const articles = await prisma.article.findMany({
        orderBy: { createdAt: "desc" },
        take: 10,
      });

      if (articles.length === 0) {
        await sendMessage(chatId, "–ü–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.");
      } else {
        const list = articles
          .map(
            (a, i) =>
              `${i + 1}. ${a.published ? "‚úÖ" : "‚ùå"} <b>${a.title}</b>\n   slug: ${a.slug}`
          )
          .join("\n\n");
        await sendMessage(chatId, `<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:</b>\n\n${list}`);
      }
      break;

    case "/cancel":
      if (userId && userStates.has(userId)) {
        userStates.delete(userId);
        await sendMessage(chatId, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
      }
      break;

    case "/help":
      await sendMessage(
        chatId,
        "<b>üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n" +
          "<b>/new_article</b> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é (–ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å)\n" +
          "<b>/list_articles</b> - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π\n" +
          "<b>/cancel</b> - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n" +
          "<b>–§–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–µ–π:</b>\n" +
          "–°—Ç–∞—Ç—å–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç Markdown —Ñ–æ—Ä–º–∞—Ç:\n" +
          "- –ó–∞–≥–æ–ª–æ–≤–∫–∏: # H1, ## H2, ### H3\n" +
          "- –°–ø–∏—Å–∫–∏: - –ø—É–Ω–∫—Ç –∏–ª–∏ 1. –ø—É–Ω–∫—Ç\n" +
          "- –ñ–∏—Ä–Ω—ã–π: **—Ç–µ–∫—Å—Ç**\n" +
          "- –ö—É—Ä—Å–∏–≤: *—Ç–µ–∫—Å—Ç*\n" +
          "- –°—Å—ã–ª–∫–∏: [—Ç–µ–∫—Å—Ç](url)"
      );
      break;

    default:
      await sendMessage(
        chatId,
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
      );
  }
}

async function handleArticleCreation(
  userId: number,
  text: string,
  message: TelegramMessage
) {
  const state = userStates.get(userId);
  if (!state) return;

  const chatId = message.chat.id;

  switch (state.step) {
    case "awaiting_title":
      state.data.title = text;
      state.step = "awaiting_content";
      await sendMessage(
        chatId,
        "‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n" +
          "–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown)"
      );
      break;

    case "awaiting_content":
      state.data.content = text;
      state.step = "awaiting_excerpt";
      await sendMessage(
        chatId,
        "‚úÖ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n" +
          '–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ (excerpt) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "skip" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞'
      );
      break;

    case "awaiting_excerpt":
      if (text.toLowerCase() !== "skip") {
        state.data.excerpt = text;
      }
      state.step = "awaiting_image";
      await sendMessage(
        chatId,
        "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n" +
          '–®–∞–≥ 4/4: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–ª–æ–∂–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–ª–∏ "skip" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞'
      );
      break;

    case "awaiting_image":
      if (text.toLowerCase() !== "skip") {
        // URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        state.data.coverImage = text;
      }
      // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å—é
      await createArticle(state.data, message.from?.username, chatId);
      userStates.delete(userId);
      break;
  }
}

async function createArticle(
  data: Partial<{
    title: string;
    content: string;
    excerpt: string;
    coverImage: string;
  }>,
  authorUsername: string | undefined,
  chatId: number
) {
  try {
    if (!data.title || !data.content) {
      await sendMessage(
        chatId,
        "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏."
      );
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug
    const slug = generateSlug(data.title);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug
    const existing = await prisma.article.findUnique({ where: { slug } });
    if (existing) {
      await sendMessage(
        chatId,
        `‚ùå –°—Ç–∞—Ç—å—è —Å —Ç–∞–∫–∏–º slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${slug}\n–ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫.`
      );
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å—é
    const article = await prisma.article.create({
      data: {
        title: data.title,
        slug,
        content: data.content,
        excerpt: data.excerpt,
        coverImage: data.coverImage || "/images/example.webp",
        published: true,
        publishedAt: new Date(),
        authorUsername,
        metaTitle: data.title,
        metaDescription: data.excerpt || data.title,
      },
    });

    const siteUrl = process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000";
    const articleUrl = `${siteUrl}/articles/${article.slug}`;

    await sendMessage(
      chatId,
      `‚úÖ <b>–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n` +
        `üì∞ <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> ${article.title}\n` +
        `üîó <b>Slug:</b> ${article.slug}\n` +
        `üåê <b>URL:</b> ${articleUrl}\n\n` +
        `–°—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ.`
    );
  } catch (error) {
    console.error("Create article error:", error);
    await sendMessage(
      chatId,
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

function generateSlug(title: string): string {
  const translitMap: Record<string, string> = {
    –∞: "a",
    –±: "b",
    –≤: "v",
    –≥: "g",
    –¥: "d",
    –µ: "e",
    —ë: "e",
    –∂: "zh",
    –∑: "z",
    –∏: "i",
    –π: "y",
    –∫: "k",
    –ª: "l",
    –º: "m",
    –Ω: "n",
    –æ: "o",
    –ø: "p",
    —Ä: "r",
    —Å: "s",
    —Ç: "t",
    —É: "u",
    —Ñ: "f",
    —Ö: "h",
    —Ü: "ts",
    —á: "ch",
    —à: "sh",
    —â: "sch",
    —ä: "",
    —ã: "y",
    —å: "",
    —ç: "e",
    —é: "yu",
    —è: "ya",
  };

  return title
    .toLowerCase()
    .split("")
    .map(char => translitMap[char] || char)
    .join("")
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-|-$/g, "")
    .substring(0, 100);
}

async function sendMessage(chatId: number, text: string) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken) return;

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      parse_mode: "HTML",
    }),
  });
}
